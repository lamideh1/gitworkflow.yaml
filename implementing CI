Here’s a **full step-by-step guide** for setting up **GitHub Actions CI/CD** using matrix builds, dependency caching, and code quality checks (Lessons 2 & 3). This will help you test your project across multiple environments and enforce code quality standards like a pro.

---

## **FULL STEPS TO SET UP GITHUB ACTIONS CI PIPELINE**

---

### **STEP 1: Prepare Your Project**

Make sure your Node.js project has:

* A `package.json` file with scripts:

```json
{
  "scripts": {
    "build": "your-build-command",
    "test": "your-test-command",
    "lint": "eslint ."
  }
}
```

* A `.eslintrc.json` file:

```json
{
  "extends": "eslint:recommended",
  "env": {
    "node": true,
    "es2021": true
  },
  "rules": {
    "semi": ["error", "always"],
    "quotes": ["error", "single"]
  }
}
```

* ESLint installed:

```bash
npm install --save-dev eslint
```

---

### **STEP 2: Create GitHub Actions Workflow File**

1. Create the GitHub Actions folder:

```bash
mkdir -p .github/workflows
```

2. Create the workflow file:

```bash
touch .github/workflows/ci.yml
```

---

### **STEP 3: Add Workflow Code (ci.yml)**

Paste the following into `.github/workflows/ci.yml`:

```yaml
name: CI Matrix Build with Linter

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]  # Parallel builds across Node versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npm run lint  # ESLint static code analysis

      - name: Build Application
        run: npm run build

      - name: Run Tests
        run: npm test
```

---

### **STEP 4: Push to GitHub**

Commit and push your changes:

```bash
git add .
git commit -m "Setup CI pipeline with matrix build, caching, and linting"
git push origin main
```

---

### **STEP 5: Check GitHub Actions**

1. Go to your GitHub repo.
2. Click the **Actions** tab.
3. Select the latest workflow run to see matrix builds (Node.js 12.x, 14.x, 16.x) running in parallel.
4. Review logs to see linting, build, and test results.

---

### **STEP 6: Maintain Your Workflow**

* Update matrix versions as Node.js evolves.
* Adjust ESLint rules in `.eslintrc.json` as needed.
* Add more tools like Prettier, Jest, or SonarCloud for deeper code quality checks.

---

### Summary of What You’ve Done:

* Built and tested code on multiple Node.js versions.
* Cached dependencies to speed up installs.
* Ran a linter to enforce clean code.
* Set up everything in a professional CI workflow.

---

Would you like a GitHub repository template or downloadable ZIP to get started even faster?
